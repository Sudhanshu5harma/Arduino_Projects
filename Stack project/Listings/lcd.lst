C51 COMPILER V9.56.0.0   LCD                                                               12/19/2017 12:12:57 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\Objects\lcd.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lcd.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\lcd.l
                    -st) TABS(2) OBJECT(.\Objects\lcd.obj)

line level    source

   1          #include<reg52.h>
   2          #include<stdio.h>
   3          void UART_Init()
   4          {
   5   1        TMOD = 0x20;
   6   1        TH1 = 0xFD;
   7   1        SCON = 0x50;
   8   1        TR1 = 1;
   9   1      }
  10          void UART_TxChar(char Data)
  11          {
  12   1        SBUF = Data;
  13   1        while (TI==0);
  14   1        TI = 0;
  15   1      }
  16          
  17          char UART_RxChar()
  18          {
  19   1        char dat;
  20   1        while (RI==0);
  21   1        RI = 0;
  22   1        dat = SBUF;
  23   1        return(dat);
  24   1      }
  25            
  26          void UART_SendString(char *str)
  27          {
  28   1           int i;
  29   1           for(i=0;str[i]!=0;i++)
  30   1          {
  31   2               UART_TxChar(str[i]);
  32   2          }
  33   1      }
  34          
  35          sbit CLK=P0^1;
  36          sbit DIN=P0^2;
  37          sbit DC=P0^3;
  38          sbit CE=P0^4;
  39          sbit RST=P0^5;
  40          
  41          void Send(unsigned char);
  42          void Data(unsigned char);
  43          void Cmd(unsigned char);
  44          void setPixel(unsigned char, unsigned char);
  45          void setCursor(unsigned char, unsigned char);
  46          void allClear(void);
  47          void Initialize_LCD(void);
  48          void charDisp(unsigned char);
  49          void stringDisp(unsigned char*);
  50          
  51          
  52          
  53          /*unsigned char code  CircuitsTodayLogo [504] = {
  54          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
C51 COMPILER V9.56.0.0   LCD                                                               12/19/2017 12:12:57 PAGE 2   

             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xe0
             -, 0xf0, 0xf0, 0xf8, 0x7c, 0x7c, 0x3e, 0x1c, 0x8c, 0xc8, 0xc0, 0xe0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  55          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x1c, 0x3c, 0x7e, 0xff, 0xff, 0xff, 0xe7, 0xe3
             -, 0xc3, 0x89, 0x98, 0x3c, 0x3e, 0x1e, 0x0f, 0x0f, 0x8f, 0x9f, 0xff, 0xfd, 0xf8, 0xf0, 0xf8, 0xfc, 0x7c, 0x3c, 0x1c, 0x18
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  56          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03
             -, 0x07, 0x0f, 0x1f, 0x1f, 0x3e, 0x7c, 0x3e, 0x1f, 0x1f, 0x0f, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  57          0x00, 0x00, 0x30, 0xfc, 0xfc, 0xce, 0x86, 0x06, 0x07, 0x06, 0x86, 0x86, 0x84, 0x00, 0x00, 0x00, 0xfe, 0xfe
             -, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x66, 0x66, 0xf6, 0xfe, 0xbc, 0x18, 0x00, 0x30, 0xfc, 0xfc, 0xce, 0x86, 0x06
             -, 0x07, 0x06, 0x86, 0x86, 0x84, 0x00, 0x00, 0x7e, 0xfe, 0xfe, 0x80, 0x00, 0x00, 0x80, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00
             -, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x06, 0x06, 0x06, 0xfe, 0xfe, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x80, 0x9e, 0x9e, 0x3e, 0x37
             -, 0xb6, 0xf6, 0xe0, 0x40, 0x00, 0x00, 
  58          0x00, 0x00, 0x00, 0x00, 0x61, 0x61, 0x63, 0x63, 0xe3, 0xe3, 0xe1, 0x61, 0x61, 0x60, 0x00, 0x00, 0x03, 0x03
             -, 0x00, 0x00, 0x80, 0xc0, 0xc3, 0xe3, 0x63, 0x60, 0x60, 0xe0, 0xc1, 0xc3, 0x03, 0x02, 0x00, 0x00, 0x01, 0x01, 0x03, 0xe3
             -, 0xe3, 0xe3, 0xe1, 0x61, 0x60, 0xe0, 0xc0, 0xc0, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0xc0, 0xe0, 0xe0
             -, 0xe3, 0xe3, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x23, 0x60, 0xe0, 0xe0, 0xc0, 0x00, 0x81, 0xc1, 0xe3, 0x63
             -, 0x23, 0x01, 0x01, 0x00, 0x00, 0x00, 
  59          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
             -, 0x00, 0x00, 0x07, 0x0f, 0x1f, 0x18, 0x18, 0x10, 0x18, 0x1c, 0x1f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f
             -, 0x1f, 0x1f, 0x1f, 0x18, 0x18, 0x1c, 0x1f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x1e, 0x1f, 0x0f, 0x0c
             -, 0x0d, 0x0f, 0x1f, 0x1e, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1f, 0x1f, 0x1f, 0x03, 0x01, 0x00
             -, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  60          };
  61          */
  62          
  63          const unsigned char code LookUpTable [][5] =
  64          {
  65              { 0x00, 0x00, 0x00, 0x00, 0x00 },  // space
  66              { 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
  67              { 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
  68              { 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
  69              { 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
  70              { 0xc4, 0xc8, 0x10, 0x26, 0x46 },   // %
  71              { 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
  72              { 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
  73              { 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
  74              { 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
  75              { 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
  76              { 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
  77              { 0x00, 0x00, 0x50, 0x30, 0x00 },   // ,
  78              { 0x10, 0x10, 0x10, 0x10, 0x10 },   // -
  79              { 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
  80              { 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
  81              { 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
  82              { 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
  83              { 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
  84              { 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
  85              { 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
  86              { 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
  87              { 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
  88              { 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
  89              { 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
  90              { 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
  91              { 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
  92              { 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
C51 COMPILER V9.56.0.0   LCD                                                               12/19/2017 12:12:57 PAGE 3   

  93              { 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
  94              { 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
  95              { 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
  96              { 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
  97              { 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
  98              { 0x7E, 0x11, 0x11, 0x11, 0x7E },   // A
  99              { 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
 100              { 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
 101              { 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
 102              { 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
 103              { 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
 104              { 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
 105              { 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
 106              { 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
 107              { 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
 108              { 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
 109              { 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
 110              { 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
 111              { 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
 112              { 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
 113              { 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
 114              { 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
 115              { 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
 116              { 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
 117              { 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
 118              { 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
 119              { 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
 120              { 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
 121              { 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
 122              { 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
 123              { 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
 124              { 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
 125              { 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
 126              { 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
 127              { 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
 128              { 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
 129              { 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
 130              { 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
 131              { 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
 132              { 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
 133              { 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
 134              { 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
 135              { 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
 136              { 0x0C, 0x52, 0x52, 0x52, 0x3E },   // g
 137              { 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
 138              { 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
 139              { 0x20, 0x40, 0x44, 0x3D, 0x00 },   // j
 140              { 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
 141              { 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
 142              { 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
 143              { 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
 144              { 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
 145              { 0x7C, 0x14, 0x14, 0x14, 0x08 },   // p
 146              { 0x08, 0x14, 0x14, 0x18, 0x7C },   // q
 147              { 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
 148              { 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
 149              { 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
 150              { 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
 151              { 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
 152              { 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
 153              { 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
 154              { 0x0C, 0x50, 0x50, 0x50, 0x3C },   // y
C51 COMPILER V9.56.0.0   LCD                                                               12/19/2017 12:12:57 PAGE 4   

 155              { 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
 156              { 0x00, 0x08, 0x3e, 0x41, 0x00 }    // {
 157          };
 158          
 159          
 160          void Send(unsigned char a){
 161   1        unsigned char i;
 162   1        for(i=0;i<8;i++){
 163   2          CLK = 0;
 164   2          if((a&0x80)){
 165   3            DIN = 1;
 166   3          } else {
 167   3            DIN = 0;
 168   3          }
 169   2          CLK = 1;
 170   2          a <<= 1;
 171   2        }
 172   1      }
 173          
 174          
 175          void Data(unsigned char x){
 176   1        DC = 1;
 177   1        CE = 0;
 178   1        Send(x);
 179   1        CE = 1;
 180   1      }
 181          
 182          void Cmd(unsigned char x){
 183   1        DC = 0;
 184   1        CE = 0;
 185   1        Send(x);
 186   1        CE = 1;
 187   1      }
 188          
 189          /* Brings ram pointer to X,Y pixel position            */
 190          /* Input Arguments: x-> X cordinate range from 0 to 83 */
 191          /* Input Arguments: y-> Y cordinate range from 0 to 5  */
 192          void setPixel(unsigned char x, unsigned char y)
 193          {
 194   1        Cmd(0x40|(y&0x07)); // Y axis
 195   1        Cmd(0x80|(x&0x7f)); // X axis
 196   1      }
 197          
 198          /* Clears the screen */
 199          void allClear(void)
 200          {
 201   1        int pixel;
 202   1        setPixel(0,0);                    // Cursor Home.
 203   1        for (pixel=504;pixel>0;pixel--) {Data(0x00);}   // 6*84 = 504 DDRAM addresses.
 204   1      }
 205          
 206          /* Nokia3310 LCD Initialization */
 207          void Initialize_LCD(void)
 208          {
 209   1        RST = 1;  // Set _RES HIGH.
 210   1        CE = 1;   // Disable Chip.
 211   1      
 212   1      
 213   1        Cmd(0x21);    // Activate Chip and H=1.
 214   1        Cmd(0xb2);    // Set LCD Voltage to about 7V.
 215   1        Cmd(0x13);    // Adjust voltage bias.
 216   1        Cmd(0x20);    // Horizontal addressing and H=0.
C51 COMPILER V9.56.0.0   LCD                                                               12/19/2017 12:12:57 PAGE 5   

 217   1        Cmd(0x09);    // Activate all segments.
 218   1        allClear();     // Erase all pixel on the DDRAM.
 219   1        Cmd(0x08);    // Blank the Display.
 220   1        Cmd(0x0C);    // Display Normal.
 221   1        setPixel(0,0);    // Cursor Home.
 222   1      }
 223          
 224          /* Bring cursor to Line and character specified                     */
 225          /* Input Arguments: row    -> Line number range from 1 to 6         */
 226          /* Input Arguments: Column -> character position range from 1 to 14 */
 227          /* You can have maximum of 6 lines of text on LCD and each line
 228             containing 14 characters. Address is auto increment              */
 229          
 230          void setCursor(unsigned char row, unsigned char col){
 231   1        if((row>6) || (row<1) || (col<1) || (col>14))
 232   1          return;
 233   1        setPixel(((col-1)*6),(row-1));
 234   1      }
 235          
 236          /* Writes single character on LCD                   */
 237          /* Input Arguments: ch -> Character to be displayed */
 238          void charDisp(unsigned char a){
 239   1        unsigned char i, b;
 240   1        if ( (a < 0x20) || (a > 0x7c) ){
 241   2          a = 92;
 242   2        }
 243   1        for(i=0;i<5;i++){
 244   2          b = LookUpTable[a - 32][i] << 1;
 245   2          Data(b);
 246   2        }
 247   1        Data(0x00);
 248   1      }
 249          
 250          /* Writes character string on LCD                            */
 251          /* Input Arguments: str -> Pointer to string to be displayed */
 252          void stringDisp(unsigned char *p){
 253   1        while(*p)
 254   1          charDisp(*p++);
 255   1      }
 256          
 257          
 258          
 259          
 260          void Delay(int k)
 261          {
 262   1        int i,j;
 263   1        for(i=0;i<k;i++)
 264   1        for(j=0;j<1000;j++);
 265   1      }
 266            
 267            
 268            
 269          void main(){
 270   1        int l;
 271   1        char RFID[15];
 272   1        //memset(RFID,0,15);
 273   1        UART_Init();  /* Initialize UART communication  */
 274   1        Initialize_LCD();
 275   1        //Bring Cursor to Line 1, character 1
 276   1        setCursor(1,1);
 277   1         stringDisp("Tag No. ");
 278   1        setPixel(0,0);
C51 COMPILER V9.56.0.0   LCD                                                               12/19/2017 12:12:57 PAGE 6   

 279   1        //Write gfx data on LCD
 280   1          while(1)
 281   1        {
 282   2          for(l=0;l<12;l++)
 283   2          { 
 284   3            RFID[l]=UART_RxChar();
 285   3          }
 286   2          stringDisp(RFID);
 287   2            /* Print 12 digit tag on LCD */  
 288   2        } 
 289   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    438    ----
   CONSTANT SIZE    =    469    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
